<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Todo List</title>
    <link rel="stylesheet" href="css/style.css" />
  </head>
  <body>
    <%- include("header.ejs") %>

    <div class="todoList-container">
      <form id="postForm">
        <input type="text" name="subject" placeholder="Subject" required />
        <textarea
          name="txtArea"
          id="textArea"
          rows="3"
          cols="10"
          placeholder="Write here.."
          required
        ></textarea>
        <input type="submit" value="Submit" />
      </form>

      <form id="clearForm">
        <button type="submit">Clear All</button>
      </form>

      <div class="render-container">
        <% if (posts.length > 0) { %>
        <ul class="post-list">
          <% posts.forEach(post => { %>
          <li class="post-item" data-id="<%= post.id %>">
            <input type="checkbox" class="mark-completed" />
            <h3><%= post.subject %></h3>
            <p><%= post.text %></p>
            <div class="task-actions" style="display: none">
              <button class="edit-btn">Edit</button>
              <button class="delete-btn">Delete</button>
            </div>
          </li>
          <% }) %>
        </ul>
        <% } else { %>
        <p>No posts yet! Start by creating one.</p>
        <% } %>
      </div>
    </div>

    <%- include("footer.ejs") %>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const postForm = document.querySelector("#postForm");
        const clearForm = document.querySelector("#clearForm");

        // Δημιουργία νέου post
        postForm.addEventListener("submit", async (e) => {
          e.preventDefault();
          try {
            const formData = new FormData(postForm);
            const subject = formData.get("subject");
            const text = formData.get("txtArea");

            const response = await fetch("/submit", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ subject, text }),
            });

            if (!response.ok) throw new Error("Failed to submit post");

            const data = await response.json();
            addPostToDOM(data.post);
            postForm.reset();
          } catch (error) {
            console.error("Error adding post", error.message);
          }
        });

        // Διαγραφή όλων των posts
        clearForm.addEventListener("submit", async (e) => {
          e.preventDefault();
          try {
            const response = await fetch("/clear", { method: "POST" });
            if (!response.ok) throw new Error("Failed to clear posts");

            document.querySelector(".render-container").innerHTML =
              "<p>No posts yet! Start by creating one.</p>";
          } catch (error) {
            console.error("Error clearing posts:", error.message);
          }
        });

        // Επεξεργασία post
        document.addEventListener("click", async (e) => {
          if (e.target.classList.contains("edit-btn")) {
            const postItem = e.target.closest(".post-item");
            const postId = postItem.getAttribute("data-id");
            const currentTitle = postItem.querySelector("h3").textContent;
            const currentText = postItem.querySelector("p").textContent;

            const newTitle = prompt("Edit the title", currentTitle);
            const newText = prompt("Edit the text", currentText);

            if (newTitle && newText) {
              try {
                const response = await fetch(`/edit/${postId}`, {
                  method: "PUT",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ subject: newTitle, text: newText }),
                });

                if (!response.ok) throw new Error("Failed to edit post");

                postItem.querySelector("h3").textContent = newTitle;
                postItem.querySelector("p").textContent = newText;
                alert("Post updated successfully!");
              } catch (error) {
                console.error("Error editing post", error.message);
              }
            }
          }
        });

        // Διαγραφή post
        document.addEventListener("click", async (e) => {
          if (e.target.classList.contains("delete-btn")) {
            const postItem = e.target.closest(".post-item");
            const postId = postItem.getAttribute("data-id");
            if (confirm("Are you sure you want to delete this post?")) {
              try {
                const response = await fetch(`/delete/${postId}`, {
                  method: "DELETE",
                });
                if (!response.ok) throw new Error("Failed to delete post");

                postItem.remove();
                alert("Post deleted successfully!");
              } catch (error) {
                console.error("Error deleting post", error.message);
              }
            }
          }
        });

        // Checkbox λογική
        document.addEventListener("change", (e) => {
          if (e.target.classList.contains("mark-completed")) {
            const postItem = e.target.closest(".post-item");
            const taskActions = postItem.querySelector(".task-actions");
            taskActions.style.display = e.target.checked ? "block" : "none";
          }
        });

        // Προσθήκη post στο DOM
        function addPostToDOM(post) {
          const renderContainer = document.querySelector(".render-container");
          const postList =
            document.querySelector(".post-list") ||
            document.createElement("ul");
          postList.classList.add("post-list");

          const newPost = document.createElement("li");
          newPost.classList.add("post-item");
          newPost.setAttribute("data-id", post.id);
          newPost.innerHTML = `
            <input type="checkbox" class="mark-completed" />
            <h3>${post.subject}</h3>
            <p>${post.text}</p>
            <div class="task-actions" style="display: none">
              <button class="edit-btn">Edit</button>
              <button class="delete-btn">Delete</button>
            </div>`;

          postList.appendChild(newPost);
          if (!renderContainer.contains(postList)) {
            renderContainer.innerHTML = "";
            renderContainer.appendChild(postList);
          }
        }
      });
    </script>
  </body>
</html>
